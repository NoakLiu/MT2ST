D:\Anaconda\exe\python.exe "E:\2023 Fall\23 Fall MT2ST WE Acc Meng\MT2ST-Word-Embeddings-Acceleration-Method-main\MT2ST-Word-Embeddings-Acceleration-Method-main\training_MT2ST.py"
Size of the dataset: 1000
["This film did entertain me with lots of laughs at the actors who kept the film moving along in all types of crazy directions. If you like suggestive language and sexy looking gals they were all in the picture and gals and guys all looking burned out before they even graduate from high school. There is one scene where the teenagers drive their car into a very fake deer and then proceed to throw it out into a lake or ocean, which is repeated over and over again. There is no horror to this film except the word Horrible for the entire picture and Arnold who plays a plastic cop is really one sick character. Please don't waste your time viewing this film.", 'The animation in this re-imagining of Peter & the Wolf is excellent, but at 29 minutes, the film is sleep inducing. They should have called it "Peter & the Snails", because everything moves at a snail\'s pace. I couldn\'t even watch the film in one sitting - I had to watch it 15 minutes at a time, and it was pure torture.<br /><br />Save yourself 30 minutes - do not watch this film - and you will thank me.<br /><br />I can only guess that the Oscar nominating committee only watched the first few minutes of the nominees. Unfortunately, to vote for the winner in the Best Animated Short (short!) category, the voters will have to sit through the whole thing. I already feel sorry for them - and must predict that there\'s no way this film will come close to winning.', "This is a great show, and will make you cry, this group people really loved each other in real life and it shows time and time again. Email me and let's chat. I have been to Australia and they real do talk like this.<br /><br />I want you to enjoy Five Mile Creek and pass on these great stories of right and wrong, and friendship to your kids. I have all 40 Episodes on DVD-R that I have collected over the last 5 years. See my Five Mile Creek tribute at www.mikeandvicki.com and hear the extended theme music. Let's talk about them.<br /><br />These people are so cool!", 'This is a great TV miniseries of a classic novel. Janet McTeer and John Bowe, in the lead roles, are exceptional. This is one of the best adaptations from a book that I have seen. I would LOVE to get a copy of this - let me know if you know how I might get one...Thanks!', "My husband dragged me to this film as I had no interest in seeing some Anime cartoon. I was absolutely delighted by the simple story and amazing animation. In a digital world where effects are computer generated it was refreshing to see gorgeous, imaginative hand drawn animation. The world of Sosuke and Ponyo is a vivid fantasyland intermixed with minimal reality. I haven't seen animation like this since I was a child and it is wonderful to see it endure and succeed.<br /><br />The actors supplying the voices in the English version were fabulous. The length of the movie was PERFECT, especially for children who tend to get squirrelly in films. Overall a delightful experience worth the very expensive ticket prices we have nowadays.", "This film was reeeeeeallyyyy bad! Was it meant to be a comedy as I couldn't help laughing the whole way through it? what a waste of two hours! Donald Sutherland was wooden not that he was alone, everyone else was just as bad...and how miscast was linda hamilton???", "If you have enjoyed the Butterfly Effect, Donnie Darko or The Machinist, you will enjoy K-Pax too.<br /><br />To me, this movie felt really uplifting and yet depressing in the end. Spacey delivers a great performance as Prot. Also, lets not forget the appearance of Saul Williams in the movie, who i am a big fan of.<br /><br />After watching it, i recommended the movie to lots of my friends, and everyone was pretty much blown away.<br /><br />But still, it is very underrated, maybe because of the lack of action and explosions. I'm sorry, this is not a movie about blowing things up, it's about how humans behave, and how people live in worlds that don't exist.<br /><br />Go on, and enjoy.", "The first hour or so of the movie was mostly boring to say the least. However it improved afterwards as the Valentine Party commenced. Apart from the twist as to the identity of the killer in the very end, the hot bath murder scene was one of the few relatively memorable aspects of this movie. The scene at the garden with Kate was well shot and so was the very last scene (the 'twist'). In those scenes, there was some genuine suspense and thrills and the hot bath murder scene had a nasty (the way slashers should be) edge to it. The earlier murders are frustratingly devoid of gore.", "As an avid fan of Cary Grant, I expected to watch this movie and howl with laughter, as AMC billed it as a comedy. I have never been more disappointed with a film! Cary's usual charm and effortless comedy are AWOL from this entire movie; he comes across as strained, bored, and just not himself. Mississip's character ranks among one of the worst stereotypes I have ever witnessed - his accent is terribly exaggerated (and incorrect, according to which part of Mississippi he claims to hail from), and whenever he does deliver a line, it's several decibels higher than any other cast member. Mississip tried to make himself stand out in the film as a lovable, country-bumpkin goofball, but in the end, he manages only to detract from the already weak plot. Mansfield looks more like an obscene blow-up doll than a Hollywood sex kitten, and while she was never known in Hollywood for her acting ability, this film screams that she never had that ability to begin with. Ray Walston's character was sugary and ultimately contrived. For four men on shore leave, it was the tamest leave I've ever seen. I watched this nightmare until its very end, and while I won't spoil that for anyone, I will tell you that it's the most absurd you'll ever see. The film tries to spark patriotism and a sense of debt to the fighting men, but the film misses that point totally because of its weak plot line and weak cast. Sorry, Cary!"]
['negative', 'negative', 'positive', 'positive', 'positive', 'negative', 'positive', 'positive', 'negative']
['this film did entertain me with lots of laughs at the actors who kept the film moving along in all types of crazy directions if you like suggestive language and sexy looking gals they were all in the picture and gals and guys all looking burned out before they even graduate from high school there is one scene where the teenagers drive their car into a very fake deer and then proceed to throw it out into a lake or ocean which is repeated over and over again there is no horror to this film except the word horrible for the entire picture and arnold who plays a plastic cop is really one sick character please dont waste your time viewing this film', 'the animation in this reimagining of peter  the wolf is excellent but at 29 minutes the film is sleep inducing they should have called it peter  the snails because everything moves at a snails pace i couldnt even watch the film in one sitting  i had to watch it 15 minutes at a time and it was pure torturesave yourself 30 minutes  do not watch this film  and you will thank mei can only guess that the oscar nominating committee only watched the first few minutes of the nominees unfortunately to vote for the winner in the best animated short short category the voters will have to sit through the whole thing i already feel sorry for them  and must predict that theres no way this film will come close to winning', 'this is a great show and will make you cry this group people really loved each other in real life and it shows time and time again email me and lets chat i have been to australia and they real do talk like thisi want you to enjoy five mile creek and pass on these great stories of right and wrong and friendship to your kids i have all 40 episodes on dvdr that i have collected over the last 5 years see my five mile creek tribute at wwwmikeandvickicom and hear the extended theme music lets talk about themthese people are so cool', 'this is a great tv miniseries of a classic novel janet mcteer and john bowe in the lead roles are exceptional this is one of the best adaptations from a book that i have seen i would love to get a copy of this  let me know if you know how i might get onethanks', 'my husband dragged me to this film as i had no interest in seeing some anime cartoon i was absolutely delighted by the simple story and amazing animation in a digital world where effects are computer generated it was refreshing to see gorgeous imaginative hand drawn animation the world of sosuke and ponyo is a vivid fantasyland intermixed with minimal reality i havent seen animation like this since i was a child and it is wonderful to see it endure and succeedthe actors supplying the voices in the english version were fabulous the length of the movie was perfect especially for children who tend to get squirrelly in films overall a delightful experience worth the very expensive ticket prices we have nowadays', 'this film was reeeeeeallyyyy bad was it meant to be a comedy as i couldnt help laughing the whole way through it what a waste of two hours donald sutherland was wooden not that he was alone everyone else was just as badand how miscast was linda hamilton', 'if you have enjoyed the butterfly effect donnie darko or the machinist you will enjoy kpax tooto me this movie felt really uplifting and yet depressing in the end spacey delivers a great performance as prot also lets not forget the appearance of saul williams in the movie who i am a big fan ofafter watching it i recommended the movie to lots of my friends and everyone was pretty much blown awaybut still it is very underrated maybe because of the lack of action and explosions im sorry this is not a movie about blowing things up its about how humans behave and how people live in worlds that dont existgo on and enjoy', 'the first hour or so of the movie was mostly boring to say the least however it improved afterwards as the valentine party commenced apart from the twist as to the identity of the killer in the very end the hot bath murder scene was one of the few relatively memorable aspects of this movie the scene at the garden with kate was well shot and so was the very last scene the twist in those scenes there was some genuine suspense and thrills and the hot bath murder scene had a nasty the way slashers should be edge to it the earlier murders are frustratingly devoid of gore', 'as an avid fan of cary grant i expected to watch this movie and howl with laughter as amc billed it as a comedy i have never been more disappointed with a film carys usual charm and effortless comedy are awol from this entire movie he comes across as strained bored and just not himself mississips character ranks among one of the worst stereotypes i have ever witnessed  his accent is terribly exaggerated and incorrect according to which part of mississippi he claims to hail from and whenever he does deliver a line its several decibels higher than any other cast member mississip tried to make himself stand out in the film as a lovable countrybumpkin goofball but in the end he manages only to detract from the already weak plot mansfield looks more like an obscene blowup doll than a hollywood sex kitten and while she was never known in hollywood for her acting ability this film screams that she never had that ability to begin with ray walstons character was sugary and ultimately contrived for four men on shore leave it was the tamest leave ive ever seen i watched this nightmare until its very end and while i wont spoil that for anyone i will tell you that its the most absurd youll ever see the film tries to spark patriotism and a sense of debt to the fighting men but the film misses that point totally because of its weak plot line and weak cast sorry cary']
[nltk_data] Downloading package punkt to
[nltk_data]     C:\Users\LdTenacity\AppData\Roaming\nltk_data...
[nltk_data]   Package punkt is already up-to-date!
[['this', 'film', 'did', 'entertain', 'me', 'with', 'lots', 'of', 'laughs', 'at', 'the', 'actors', 'who', 'kept', 'the', 'film', 'moving', 'along', 'in', 'all', 'types', 'of', 'crazy', 'directions', 'if', 'you', 'like', 'suggestive', 'language', 'and', 'sexy', 'looking', 'gals', 'they', 'were', 'all', 'in', 'the', 'picture', 'and', 'gals', 'and', 'guys', 'all', 'looking', 'burned', 'out', 'before', 'they', 'even', 'graduate', 'from', 'high', 'school', 'there', 'is', 'one', 'scene', 'where', 'the', 'teenagers', 'drive', 'their', 'car', 'into', 'a', 'very', 'fake', 'deer', 'and', 'then', 'proceed', 'to', 'throw', 'it', 'out', 'into', 'a', 'lake', 'or', 'ocean', 'which', 'is', 'repeated', 'over', 'and', 'over', 'again', 'there', 'is', 'no', 'horror', 'to', 'this', 'film', 'except', 'the', 'word', 'horrible', 'for', 'the', 'entire', 'picture', 'and', 'arnold', 'who', 'plays', 'a', 'plastic', 'cop', 'is', 'really', 'one', 'sick', 'character', 'please', 'dont', 'waste', 'your', 'time', 'viewing', 'this', 'film'], ['the', 'animation', 'in', 'this', 'reimagining', 'of', 'peter', 'the', 'wolf', 'is', 'excellent', 'but', 'at', '29', 'minutes', 'the', 'film', 'is', 'sleep', 'inducing', 'they', 'should', 'have', 'called', 'it', 'peter', 'the', 'snails', 'because', 'everything', 'moves', 'at', 'a', 'snails', 'pace', 'i', 'couldnt', 'even', 'watch', 'the', 'film', 'in', 'one', 'sitting', 'i', 'had', 'to', 'watch', 'it', '15', 'minutes', 'at', 'a', 'time', 'and', 'it', 'was', 'pure', 'torturesave', 'yourself', '30', 'minutes', 'do', 'not', 'watch', 'this', 'film', 'and', 'you', 'will', 'thank', 'mei', 'can', 'only', 'guess', 'that', 'the', 'oscar', 'nominating', 'committee', 'only', 'watched', 'the', 'first', 'few', 'minutes', 'of', 'the', 'nominees', 'unfortunately', 'to', 'vote', 'for', 'the', 'winner', 'in', 'the', 'best', 'animated', 'short', 'short', 'category', 'the', 'voters', 'will', 'have', 'to', 'sit', 'through', 'the', 'whole', 'thing', 'i', 'already', 'feel', 'sorry', 'for', 'them', 'and', 'must', 'predict', 'that', 'theres', 'no', 'way', 'this', 'film', 'will', 'come', 'close', 'to', 'winning'], ['this', 'is', 'a', 'great', 'show', 'and', 'will', 'make', 'you', 'cry', 'this', 'group', 'people', 'really', 'loved', 'each', 'other', 'in', 'real', 'life', 'and', 'it', 'shows', 'time', 'and', 'time', 'again', 'email', 'me', 'and', 'lets', 'chat', 'i', 'have', 'been', 'to', 'australia', 'and', 'they', 'real', 'do', 'talk', 'like', 'thisi', 'want', 'you', 'to', 'enjoy', 'five', 'mile', 'creek', 'and', 'pass', 'on', 'these', 'great', 'stories', 'of', 'right', 'and', 'wrong', 'and', 'friendship', 'to', 'your', 'kids', 'i', 'have', 'all', '40', 'episodes', 'on', 'dvdr', 'that', 'i', 'have', 'collected', 'over', 'the', 'last', '5', 'years', 'see', 'my', 'five', 'mile', 'creek', 'tribute', 'at', 'wwwmikeandvickicom', 'and', 'hear', 'the', 'extended', 'theme', 'music', 'lets', 'talk', 'about', 'themthese', 'people', 'are', 'so', 'cool'], ['this', 'is', 'a', 'great', 'tv', 'miniseries', 'of', 'a', 'classic', 'novel', 'janet', 'mcteer', 'and', 'john', 'bowe', 'in', 'the', 'lead', 'roles', 'are', 'exceptional', 'this', 'is', 'one', 'of', 'the', 'best', 'adaptations', 'from', 'a', 'book', 'that', 'i', 'have', 'seen', 'i', 'would', 'love', 'to', 'get', 'a', 'copy', 'of', 'this', 'let', 'me', 'know', 'if', 'you', 'know', 'how', 'i', 'might', 'get', 'onethanks'], ['my', 'husband', 'dragged', 'me', 'to', 'this', 'film', 'as', 'i', 'had', 'no', 'interest', 'in', 'seeing', 'some', 'anime', 'cartoon', 'i', 'was', 'absolutely', 'delighted', 'by', 'the', 'simple', 'story', 'and', 'amazing', 'animation', 'in', 'a', 'digital', 'world', 'where', 'effects', 'are', 'computer', 'generated', 'it', 'was', 'refreshing', 'to', 'see', 'gorgeous', 'imaginative', 'hand', 'drawn', 'animation', 'the', 'world', 'of', 'sosuke', 'and', 'ponyo', 'is', 'a', 'vivid', 'fantasyland', 'intermixed', 'with', 'minimal', 'reality', 'i', 'havent', 'seen', 'animation', 'like', 'this', 'since', 'i', 'was', 'a', 'child', 'and', 'it', 'is', 'wonderful', 'to', 'see', 'it', 'endure', 'and', 'succeedthe', 'actors', 'supplying', 'the', 'voices', 'in', 'the', 'english', 'version', 'were', 'fabulous', 'the', 'length', 'of', 'the', 'movie', 'was', 'perfect', 'especially', 'for', 'children', 'who', 'tend', 'to', 'get', 'squirrelly', 'in', 'films', 'overall', 'a', 'delightful', 'experience', 'worth', 'the', 'very', 'expensive', 'ticket', 'prices', 'we', 'have', 'nowadays'], ['this', 'film', 'was', 'reeeeeeallyyyy', 'bad', 'was', 'it', 'meant', 'to', 'be', 'a', 'comedy', 'as', 'i', 'couldnt', 'help', 'laughing', 'the', 'whole', 'way', 'through', 'it', 'what', 'a', 'waste', 'of', 'two', 'hours', 'donald', 'sutherland', 'was', 'wooden', 'not', 'that', 'he', 'was', 'alone', 'everyone', 'else', 'was', 'just', 'as', 'badand', 'how', 'miscast', 'was', 'linda', 'hamilton'], ['if', 'you', 'have', 'enjoyed', 'the', 'butterfly', 'effect', 'donnie', 'darko', 'or', 'the', 'machinist', 'you', 'will', 'enjoy', 'kpax', 'tooto', 'me', 'this', 'movie', 'felt', 'really', 'uplifting', 'and', 'yet', 'depressing', 'in', 'the', 'end', 'spacey', 'delivers', 'a', 'great', 'performance', 'as', 'prot', 'also', 'lets', 'not', 'forget', 'the', 'appearance', 'of', 'saul', 'williams', 'in', 'the', 'movie', 'who', 'i', 'am', 'a', 'big', 'fan', 'ofafter', 'watching', 'it', 'i', 'recommended', 'the', 'movie', 'to', 'lots', 'of', 'my', 'friends', 'and', 'everyone', 'was', 'pretty', 'much', 'blown', 'awaybut', 'still', 'it', 'is', 'very', 'underrated', 'maybe', 'because', 'of', 'the', 'lack', 'of', 'action', 'and', 'explosions', 'im', 'sorry', 'this', 'is', 'not', 'a', 'movie', 'about', 'blowing', 'things', 'up', 'its', 'about', 'how', 'humans', 'behave', 'and', 'how', 'people', 'live', 'in', 'worlds', 'that', 'dont', 'existgo', 'on', 'and', 'enjoy'], ['the', 'first', 'hour', 'or', 'so', 'of', 'the', 'movie', 'was', 'mostly', 'boring', 'to', 'say', 'the', 'least', 'however', 'it', 'improved', 'afterwards', 'as', 'the', 'valentine', 'party', 'commenced', 'apart', 'from', 'the', 'twist', 'as', 'to', 'the', 'identity', 'of', 'the', 'killer', 'in', 'the', 'very', 'end', 'the', 'hot', 'bath', 'murder', 'scene', 'was', 'one', 'of', 'the', 'few', 'relatively', 'memorable', 'aspects', 'of', 'this', 'movie', 'the', 'scene', 'at', 'the', 'garden', 'with', 'kate', 'was', 'well', 'shot', 'and', 'so', 'was', 'the', 'very', 'last', 'scene', 'the', 'twist', 'in', 'those', 'scenes', 'there', 'was', 'some', 'genuine', 'suspense', 'and', 'thrills', 'and', 'the', 'hot', 'bath', 'murder', 'scene', 'had', 'a', 'nasty', 'the', 'way', 'slashers', 'should', 'be', 'edge', 'to', 'it', 'the', 'earlier', 'murders', 'are', 'frustratingly', 'devoid', 'of', 'gore'], ['as', 'an', 'avid', 'fan', 'of', 'cary', 'grant', 'i', 'expected', 'to', 'watch', 'this', 'movie', 'and', 'howl', 'with', 'laughter', 'as', 'amc', 'billed', 'it', 'as', 'a', 'comedy', 'i', 'have', 'never', 'been', 'more', 'disappointed', 'with', 'a', 'film', 'carys', 'usual', 'charm', 'and', 'effortless', 'comedy', 'are', 'awol', 'from', 'this', 'entire', 'movie', 'he', 'comes', 'across', 'as', 'strained', 'bored', 'and', 'just', 'not', 'himself', 'mississips', 'character', 'ranks', 'among', 'one', 'of', 'the', 'worst', 'stereotypes', 'i', 'have', 'ever', 'witnessed', 'his', 'accent', 'is', 'terribly', 'exaggerated', 'and', 'incorrect', 'according', 'to', 'which', 'part', 'of', 'mississippi', 'he', 'claims', 'to', 'hail', 'from', 'and', 'whenever', 'he', 'does', 'deliver', 'a', 'line', 'its', 'several', 'decibels', 'higher', 'than', 'any', 'other', 'cast', 'member', 'mississip', 'tried', 'to', 'make', 'himself', 'stand', 'out', 'in', 'the', 'film', 'as', 'a', 'lovable', 'countrybumpkin', 'goofball', 'but', 'in', 'the', 'end', 'he', 'manages', 'only', 'to', 'detract', 'from', 'the', 'already', 'weak', 'plot', 'mansfield', 'looks', 'more', 'like', 'an', 'obscene', 'blowup', 'doll', 'than', 'a', 'hollywood', 'sex', 'kitten', 'and', 'while', 'she', 'was', 'never', 'known', 'in', 'hollywood', 'for', 'her', 'acting', 'ability', 'this', 'film', 'screams', 'that', 'she', 'never', 'had', 'that', 'ability', 'to', 'begin', 'with', 'ray', 'walstons', 'character', 'was', 'sugary', 'and', 'ultimately', 'contrived', 'for', 'four', 'men', 'on', 'shore', 'leave', 'it', 'was', 'the', 'tamest', 'leave', 'ive', 'ever', 'seen', 'i', 'watched', 'this', 'nightmare', 'until', 'its', 'very', 'end', 'and', 'while', 'i', 'wont', 'spoil', 'that', 'for', 'anyone', 'i', 'will', 'tell', 'you', 'that', 'its', 'the', 'most', 'absurd', 'youll', 'ever', 'see', 'the', 'film', 'tries', 'to', 'spark', 'patriotism', 'and', 'a', 'sense', 'of', 'debt', 'to', 'the', 'fighting', 'men', 'but', 'the', 'film', 'misses', 'that', 'point', 'totally', 'because', 'of', 'its', 'weak', 'plot', 'line', 'and', 'weak', 'cast', 'sorry', 'cary']]
[nltk_data] Downloading package stopwords to
[nltk_data]     C:\Users\LdTenacity\AppData\Roaming\nltk_data...
[nltk_data]   Package stopwords is already up-to-date!
[['film', 'entertain', 'lots', 'laughs', 'actors', 'kept', 'film', 'moving', 'along', 'types', 'crazy', 'directions', 'like', 'suggestive', 'language', 'sexy', 'looking', 'gals', 'picture', 'gals', 'guys', 'looking', 'burned', 'even', 'graduate', 'high', 'school', 'one', 'scene', 'teenagers', 'drive', 'car', 'fake', 'deer', 'proceed', 'throw', 'lake', 'ocean', 'repeated', 'horror', 'film', 'except', 'word', 'horrible', 'entire', 'picture', 'arnold', 'plays', 'plastic', 'cop', 'really', 'one', 'sick', 'character', 'please', 'dont', 'waste', 'time', 'viewing', 'film'], ['animation', 'reimagining', 'peter', 'wolf', 'excellent', '29', 'minutes', 'film', 'sleep', 'inducing', 'called', 'peter', 'snails', 'everything', 'moves', 'snails', 'pace', 'couldnt', 'even', 'watch', 'film', 'one', 'sitting', 'watch', '15', 'minutes', 'time', 'pure', 'torturesave', '30', 'minutes', 'watch', 'film', 'thank', 'mei', 'guess', 'oscar', 'nominating', 'committee', 'watched', 'first', 'minutes', 'nominees', 'unfortunately', 'vote', 'winner', 'best', 'animated', 'short', 'short', 'category', 'voters', 'sit', 'whole', 'thing', 'already', 'feel', 'sorry', 'must', 'predict', 'theres', 'way', 'film', 'come', 'close', 'winning'], ['great', 'show', 'make', 'cry', 'group', 'people', 'really', 'loved', 'real', 'life', 'shows', 'time', 'time', 'email', 'lets', 'chat', 'australia', 'real', 'talk', 'like', 'thisi', 'want', 'enjoy', 'five', 'mile', 'creek', 'pass', 'great', 'stories', 'right', 'wrong', 'friendship', 'kids', '40', 'episodes', 'dvdr', 'collected', 'last', '5', 'years', 'see', 'five', 'mile', 'creek', 'tribute', 'wwwmikeandvickicom', 'hear', 'extended', 'theme', 'music', 'lets', 'talk', 'themthese', 'people', 'cool'], ['great', 'tv', 'miniseries', 'classic', 'novel', 'janet', 'mcteer', 'john', 'bowe', 'lead', 'roles', 'exceptional', 'one', 'best', 'adaptations', 'book', 'seen', 'would', 'love', 'get', 'copy', 'let', 'know', 'know', 'might', 'get', 'onethanks'], ['husband', 'dragged', 'film', 'interest', 'seeing', 'anime', 'cartoon', 'absolutely', 'delighted', 'simple', 'story', 'amazing', 'animation', 'digital', 'world', 'effects', 'computer', 'generated', 'refreshing', 'see', 'gorgeous', 'imaginative', 'hand', 'drawn', 'animation', 'world', 'sosuke', 'ponyo', 'vivid', 'fantasyland', 'intermixed', 'minimal', 'reality', 'havent', 'seen', 'animation', 'like', 'since', 'child', 'wonderful', 'see', 'endure', 'succeedthe', 'actors', 'supplying', 'voices', 'english', 'version', 'fabulous', 'length', 'movie', 'perfect', 'especially', 'children', 'tend', 'get', 'squirrelly', 'films', 'overall', 'delightful', 'experience', 'worth', 'expensive', 'ticket', 'prices', 'nowadays'], ['film', 'reeeeeeallyyyy', 'bad', 'meant', 'comedy', 'couldnt', 'help', 'laughing', 'whole', 'way', 'waste', 'two', 'hours', 'donald', 'sutherland', 'wooden', 'alone', 'everyone', 'else', 'badand', 'miscast', 'linda', 'hamilton'], ['enjoyed', 'butterfly', 'effect', 'donnie', 'darko', 'machinist', 'enjoy', 'kpax', 'tooto', 'movie', 'felt', 'really', 'uplifting', 'yet', 'depressing', 'end', 'spacey', 'delivers', 'great', 'performance', 'prot', 'also', 'lets', 'forget', 'appearance', 'saul', 'williams', 'movie', 'big', 'fan', 'ofafter', 'watching', 'recommended', 'movie', 'lots', 'friends', 'everyone', 'pretty', 'much', 'blown', 'awaybut', 'still', 'underrated', 'maybe', 'lack', 'action', 'explosions', 'im', 'sorry', 'movie', 'blowing', 'things', 'humans', 'behave', 'people', 'live', 'worlds', 'dont', 'existgo', 'enjoy'], ['first', 'hour', 'movie', 'mostly', 'boring', 'say', 'least', 'however', 'improved', 'afterwards', 'valentine', 'party', 'commenced', 'apart', 'twist', 'identity', 'killer', 'end', 'hot', 'bath', 'murder', 'scene', 'one', 'relatively', 'memorable', 'aspects', 'movie', 'scene', 'garden', 'kate', 'well', 'shot', 'last', 'scene', 'twist', 'scenes', 'genuine', 'suspense', 'thrills', 'hot', 'bath', 'murder', 'scene', 'nasty', 'way', 'slashers', 'edge', 'earlier', 'murders', 'frustratingly', 'devoid', 'gore'], ['avid', 'fan', 'cary', 'grant', 'expected', 'watch', 'movie', 'howl', 'laughter', 'amc', 'billed', 'comedy', 'never', 'disappointed', 'film', 'carys', 'usual', 'charm', 'effortless', 'comedy', 'awol', 'entire', 'movie', 'comes', 'across', 'strained', 'bored', 'mississips', 'character', 'ranks', 'among', 'one', 'worst', 'stereotypes', 'ever', 'witnessed', 'accent', 'terribly', 'exaggerated', 'incorrect', 'according', 'part', 'mississippi', 'claims', 'hail', 'whenever', 'deliver', 'line', 'several', 'decibels', 'higher', 'cast', 'member', 'mississip', 'tried', 'make', 'stand', 'film', 'lovable', 'countrybumpkin', 'goofball', 'end', 'manages', 'detract', 'already', 'weak', 'plot', 'mansfield', 'looks', 'like', 'obscene', 'blowup', 'doll', 'hollywood', 'sex', 'kitten', 'never', 'known', 'hollywood', 'acting', 'ability', 'film', 'screams', 'never', 'ability', 'begin', 'ray', 'walstons', 'character', 'sugary', 'ultimately', 'contrived', 'four', 'men', 'shore', 'leave', 'tamest', 'leave', 'ive', 'ever', 'seen', 'watched', 'nightmare', 'end', 'wont', 'spoil', 'anyone', 'tell', 'absurd', 'youll', 'ever', 'see', 'film', 'tries', 'spark', 'patriotism', 'sense', 'debt', 'fighting', 'men', 'film', 'misses', 'point', 'totally', 'weak', 'plot', 'line', 'weak', 'cast', 'sorry', 'cary']]
[nltk_data] Downloading package wordnet to
[nltk_data]     C:\Users\LdTenacity\AppData\Roaming\nltk_data...
[nltk_data]   Package wordnet is already up-to-date!
[nltk_data] Downloading package omw-1.4 to
[nltk_data]     C:\Users\LdTenacity\AppData\Roaming\nltk_data...
[nltk_data]   Package omw-1.4 is already up-to-date!
[['film', 'entertain', 'lot', 'laugh', 'actor', 'kept', 'film', 'moving', 'along', 'type', 'crazy', 'direction', 'like', 'suggestive', 'language', 'sexy', 'looking', 'gal', 'picture', 'gal', 'guy', 'looking', 'burned', 'even', 'graduate', 'high', 'school', 'one', 'scene', 'teenager', 'drive', 'car', 'fake', 'deer', 'proceed', 'throw', 'lake', 'ocean', 'repeated', 'horror', 'film', 'except', 'word', 'horrible', 'entire', 'picture', 'arnold', 'play', 'plastic', 'cop', 'really', 'one', 'sick', 'character', 'please', 'dont', 'waste', 'time', 'viewing', 'film'], ['animation', 'reimagining', 'peter', 'wolf', 'excellent', '29', 'minute', 'film', 'sleep', 'inducing', 'called', 'peter', 'snail', 'everything', 'move', 'snail', 'pace', 'couldnt', 'even', 'watch', 'film', 'one', 'sitting', 'watch', '15', 'minute', 'time', 'pure', 'torturesave', '30', 'minute', 'watch', 'film', 'thank', 'mei', 'guess', 'oscar', 'nominating', 'committee', 'watched', 'first', 'minute', 'nominee', 'unfortunately', 'vote', 'winner', 'best', 'animated', 'short', 'short', 'category', 'voter', 'sit', 'whole', 'thing', 'already', 'feel', 'sorry', 'must', 'predict', 'there', 'way', 'film', 'come', 'close', 'winning'], ['great', 'show', 'make', 'cry', 'group', 'people', 'really', 'loved', 'real', 'life', 'show', 'time', 'time', 'email', 'let', 'chat', 'australia', 'real', 'talk', 'like', 'thisi', 'want', 'enjoy', 'five', 'mile', 'creek', 'pas', 'great', 'story', 'right', 'wrong', 'friendship', 'kid', '40', 'episode', 'dvdr', 'collected', 'last', '5', 'year', 'see', 'five', 'mile', 'creek', 'tribute', 'wwwmikeandvickicom', 'hear', 'extended', 'theme', 'music', 'let', 'talk', 'themthese', 'people', 'cool'], ['great', 'tv', 'miniseries', 'classic', 'novel', 'janet', 'mcteer', 'john', 'bowe', 'lead', 'role', 'exceptional', 'one', 'best', 'adaptation', 'book', 'seen', 'would', 'love', 'get', 'copy', 'let', 'know', 'know', 'might', 'get', 'onethanks'], ['husband', 'dragged', 'film', 'interest', 'seeing', 'anime', 'cartoon', 'absolutely', 'delighted', 'simple', 'story', 'amazing', 'animation', 'digital', 'world', 'effect', 'computer', 'generated', 'refreshing', 'see', 'gorgeous', 'imaginative', 'hand', 'drawn', 'animation', 'world', 'sosuke', 'ponyo', 'vivid', 'fantasyland', 'intermixed', 'minimal', 'reality', 'havent', 'seen', 'animation', 'like', 'since', 'child', 'wonderful', 'see', 'endure', 'succeedthe', 'actor', 'supplying', 'voice', 'english', 'version', 'fabulous', 'length', 'movie', 'perfect', 'especially', 'child', 'tend', 'get', 'squirrelly', 'film', 'overall', 'delightful', 'experience', 'worth', 'expensive', 'ticket', 'price', 'nowadays'], ['film', 'reeeeeeallyyyy', 'bad', 'meant', 'comedy', 'couldnt', 'help', 'laughing', 'whole', 'way', 'waste', 'two', 'hour', 'donald', 'sutherland', 'wooden', 'alone', 'everyone', 'else', 'badand', 'miscast', 'linda', 'hamilton'], ['enjoyed', 'butterfly', 'effect', 'donnie', 'darko', 'machinist', 'enjoy', 'kpax', 'tooto', 'movie', 'felt', 'really', 'uplifting', 'yet', 'depressing', 'end', 'spacey', 'delivers', 'great', 'performance', 'prot', 'also', 'let', 'forget', 'appearance', 'saul', 'williams', 'movie', 'big', 'fan', 'ofafter', 'watching', 'recommended', 'movie', 'lot', 'friend', 'everyone', 'pretty', 'much', 'blown', 'awaybut', 'still', 'underrated', 'maybe', 'lack', 'action', 'explosion', 'im', 'sorry', 'movie', 'blowing', 'thing', 'human', 'behave', 'people', 'live', 'world', 'dont', 'existgo', 'enjoy'], ['first', 'hour', 'movie', 'mostly', 'boring', 'say', 'least', 'however', 'improved', 'afterwards', 'valentine', 'party', 'commenced', 'apart', 'twist', 'identity', 'killer', 'end', 'hot', 'bath', 'murder', 'scene', 'one', 'relatively', 'memorable', 'aspect', 'movie', 'scene', 'garden', 'kate', 'well', 'shot', 'last', 'scene', 'twist', 'scene', 'genuine', 'suspense', 'thrill', 'hot', 'bath', 'murder', 'scene', 'nasty', 'way', 'slasher', 'edge', 'earlier', 'murder', 'frustratingly', 'devoid', 'gore'], ['avid', 'fan', 'cary', 'grant', 'expected', 'watch', 'movie', 'howl', 'laughter', 'amc', 'billed', 'comedy', 'never', 'disappointed', 'film', 'carys', 'usual', 'charm', 'effortless', 'comedy', 'awol', 'entire', 'movie', 'come', 'across', 'strained', 'bored', 'mississips', 'character', 'rank', 'among', 'one', 'worst', 'stereotype', 'ever', 'witnessed', 'accent', 'terribly', 'exaggerated', 'incorrect', 'according', 'part', 'mississippi', 'claim', 'hail', 'whenever', 'deliver', 'line', 'several', 'decibel', 'higher', 'cast', 'member', 'mississip', 'tried', 'make', 'stand', 'film', 'lovable', 'countrybumpkin', 'goofball', 'end', 'manages', 'detract', 'already', 'weak', 'plot', 'mansfield', 'look', 'like', 'obscene', 'blowup', 'doll', 'hollywood', 'sex', 'kitten', 'never', 'known', 'hollywood', 'acting', 'ability', 'film', 'scream', 'never', 'ability', 'begin', 'ray', 'walstons', 'character', 'sugary', 'ultimately', 'contrived', 'four', 'men', 'shore', 'leave', 'tamest', 'leave', 'ive', 'ever', 'seen', 'watched', 'nightmare', 'end', 'wont', 'spoil', 'anyone', 'tell', 'absurd', 'youll', 'ever', 'see', 'film', 'try', 'spark', 'patriotism', 'sense', 'debt', 'fighting', 'men', 'film', 'miss', 'point', 'totally', 'weak', 'plot', 'line', 'weak', 'cast', 'sorry', 'cary']]
Epoch: 1, loss: 0.69401, train_acc: 0.49
Epoch: 2, loss: 13.51818, train_acc: 0.51
Epoch: 3, loss: 2.34963, train_acc: 0.52
Epoch: 4, loss: 0.88337, train_acc: 0.49
Epoch: 5, loss: 0.69696, train_acc: 0.49
Epoch: 6, loss: 1.44496, train_acc: 0.51
Epoch: 7, loss: 1.56632, train_acc: 0.49
Epoch: 8, loss: 0.85000, train_acc: 0.49
Epoch: 9, loss: 1.55363, train_acc: 0.51
Epoch: 10, loss: 1.27768, train_acc: 0.51
Epoch: 11, loss: 0.96436, train_acc: 0.48
Epoch: 12, loss: 1.86057, train_acc: 0.49
Epoch: 13, loss: 0.98168, train_acc: 0.49
Epoch: 14, loss: 1.34114, train_acc: 0.51
Epoch: 15, loss: 1.66169, train_acc: 0.51
Epoch: 16, loss: 0.82192, train_acc: 0.51
Epoch: 17, loss: 1.28740, train_acc: 0.49
Epoch: 18, loss: 1.47176, train_acc: 0.49
Epoch: 19, loss: 0.73445, train_acc: 0.49
Epoch: 20, loss: 1.19984, train_acc: 0.51
Epoch: 21, loss: 1.28190, train_acc: 0.51
Epoch: 22, loss: 0.70793, train_acc: 0.51
Epoch: 23, loss: 1.13667, train_acc: 0.49
Epoch: 24, loss: 1.10981, train_acc: 0.49
Epoch: 25, loss: 0.69715, train_acc: 0.50
Finished Training
D:\Anaconda\exe\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
D:\Anaconda\exe\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
D:\Anaconda\exe\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
              precision    recall  f1-score   support

           0       0.00      0.00      0.00       132
           1       0.47      1.00      0.64       118

    accuracy                           0.47       250
   macro avg       0.24      0.50      0.32       250
weighted avg       0.22      0.47      0.30       250

weight adjusted tensor(1.9888, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -1.29577, train_acc: 0.51
weight adjusted tensor(1.9897, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -1.29514, train_acc: 0.49
weight adjusted tensor(1.9891, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -1.29667, train_acc: 0.53
weight adjusted tensor(1.9884, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -1.29572, train_acc: 0.51
weight adjusted tensor(1.9890, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -1.29779, train_acc: 0.51
weight adjusted tensor(1.9897, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -1.29951, train_acc: 0.57
weight adjusted tensor(1.9753, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -1.28535, train_acc: 0.55
weight adjusted tensor(1.9771, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -1.28801, train_acc: 0.56
weight adjusted tensor(1.8930, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -1.20555, train_acc: 0.57
weight adjusted tensor(1.8914, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -1.20586, train_acc: 0.59
weight adjusted tensor(1.8921, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -1.20846, train_acc: 0.54
weight adjusted tensor(1.8911, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -1.20987, train_acc: 0.55
weight adjusted tensor(1.8945, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -1.21698, train_acc: 0.63
weight adjusted tensor(1.8979, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -1.22524, train_acc: 0.64
weight adjusted tensor(1.9014, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -1.23446, train_acc: 0.64
Epoch: 1, loss: 0.65871, train_acc: 0.67
Epoch: 2, loss: 0.64665, train_acc: 0.69
Epoch: 3, loss: 0.62954, train_acc: 0.77
Epoch: 4, loss: 0.60051, train_acc: 0.86
Epoch: 5, loss: 0.54272, train_acc: 0.78
Epoch: 6, loss: 0.83858, train_acc: 0.51
Epoch: 7, loss: 0.63661, train_acc: 0.59
Epoch: 8, loss: 0.55973, train_acc: 0.75
Epoch: 9, loss: 0.58690, train_acc: 0.79
Epoch: 10, loss: 0.58117, train_acc: 0.74
Finished Training
              precision    recall  f1-score   support

           0       0.86      0.05      0.09       132
           1       0.48      0.99      0.65       118

    accuracy                           0.49       250
   macro avg       0.67      0.52      0.37       250
weighted avg       0.68      0.49      0.35       250

weight adjusted tensor(1.9888, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -1.29569, train_acc: 0.51
weight adjusted tensor(1.9888, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -1.29397, train_acc: 0.50
weight adjusted tensor(1.9872, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -1.29504, train_acc: 0.53
weight adjusted tensor(1.9870, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -1.29424, train_acc: 0.51
weight adjusted tensor(1.9871, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -1.29597, train_acc: 0.51
weight adjusted tensor(1.9873, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -1.29741, train_acc: 0.57
weight adjusted tensor(1.9722, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -1.28255, train_acc: 0.56
weight adjusted tensor(1.9731, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -1.28433, train_acc: 0.57
weight adjusted tensor(1.9762, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -1.28905, train_acc: 0.57
weight adjusted tensor(1.8955, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -1.21039, train_acc: 0.60
weight adjusted tensor(1.8987, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -1.21569, train_acc: 0.59
weight adjusted tensor(1.8973, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -1.21657, train_acc: 0.56
weight adjusted tensor(1.9014, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -1.22426, train_acc: 0.63
weight adjusted tensor(1.9055, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -1.23340, train_acc: 0.65
weight adjusted tensor(1.9082, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -1.24200, train_acc: 0.66
Epoch: 1, loss: 0.65823, train_acc: 0.67
Epoch: 2, loss: 0.64598, train_acc: 0.69
Epoch: 3, loss: 0.62977, train_acc: 0.75
Epoch: 4, loss: 0.60215, train_acc: 0.84
Epoch: 5, loss: 0.55514, train_acc: 0.85
Epoch: 6, loss: 1.11263, train_acc: 0.51
Epoch: 7, loss: 0.49524, train_acc: 0.89
Epoch: 8, loss: 0.57391, train_acc: 0.67
Epoch: 9, loss: 0.54443, train_acc: 0.86
Epoch: 10, loss: 0.54635, train_acc: 0.90
Finished Training
              precision    recall  f1-score   support

           0       0.61      0.32      0.42       132
           1       0.50      0.77      0.61       118

    accuracy                           0.53       250
   macro avg       0.56      0.54      0.51       250
weighted avg       0.56      0.53      0.51       250

weight adjusted tensor(1.9888, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -1.29561, train_acc: 0.51
weight adjusted tensor(1.9878, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -1.29123, train_acc: 0.49
weight adjusted tensor(1.9845, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -1.29226, train_acc: 0.52
weight adjusted tensor(2.0598, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -1.36776, train_acc: 0.51
weight adjusted tensor(2.0578, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -1.36518, train_acc: 0.51
weight adjusted tensor(1.9771, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -1.28554, train_acc: 0.51
weight adjusted tensor(1.9754, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -1.28538, train_acc: 0.51
weight adjusted tensor(1.9710, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -1.28203, train_acc: 0.56
weight adjusted tensor(1.9695, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -1.28117, train_acc: 0.58
weight adjusted tensor(1.9670, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -1.27959, train_acc: 0.57
weight adjusted tensor(1.9654, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -1.27966, train_acc: 0.58
weight adjusted tensor(1.9654, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -1.28202, train_acc: 0.61
weight adjusted tensor(1.9588, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -1.27800, train_acc: 0.60
weight adjusted tensor(1.9273, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -1.24928, train_acc: 0.61
weight adjusted tensor(1.8923, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -1.21785, train_acc: 0.63
Epoch: 1, loss: 0.66880, train_acc: 0.66
Epoch: 2, loss: 0.66146, train_acc: 0.70
Epoch: 3, loss: 0.65229, train_acc: 0.71
Epoch: 4, loss: 0.63813, train_acc: 0.73
Epoch: 5, loss: 0.61645, train_acc: 0.80
Epoch: 6, loss: 0.58123, train_acc: 0.84
Epoch: 7, loss: 0.67789, train_acc: 0.61
Epoch: 8, loss: 0.64231, train_acc: 0.53
Epoch: 9, loss: 0.58991, train_acc: 0.56
Epoch: 10, loss: 0.56181, train_acc: 0.67
Finished Training
              precision    recall  f1-score   support

           0       0.62      0.23      0.34       132
           1       0.49      0.84      0.62       118

    accuracy                           0.52       250
   macro avg       0.56      0.54      0.48       250
weighted avg       0.56      0.52      0.47       250

weight adjusted tensor(1.9888, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -1.29526, train_acc: 0.47
weight adjusted tensor(1.9891, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -1.29199, train_acc: 0.51
weight adjusted tensor(1.9899, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -1.29782, train_acc: 0.51
weight adjusted tensor(1.9909, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -1.29785, train_acc: 0.49
weight adjusted tensor(1.9928, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -1.29974, train_acc: 0.49
weight adjusted tensor(1.9948, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -1.30372, train_acc: 0.53
weight adjusted tensor(1.9968, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -1.30737, train_acc: 0.55
weight adjusted tensor(1.9992, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -1.31031, train_acc: 0.52
weight adjusted tensor(2.0017, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -1.31329, train_acc: 0.51
weight adjusted tensor(1.9969, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -1.30988, train_acc: 0.51
weight adjusted tensor(1.9993, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -1.31437, train_acc: 0.52
weight adjusted tensor(1.9954, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -1.31278, train_acc: 0.63
weight adjusted tensor(1.9223, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -1.24212, train_acc: 0.65
weight adjusted tensor(1.9138, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -1.23655, train_acc: 0.66
weight adjusted tensor(1.9179, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -1.24497, train_acc: 0.67
Epoch: 1, loss: 0.66690, train_acc: 0.65
Epoch: 2, loss: 0.66022, train_acc: 0.67
Epoch: 3, loss: 0.65042, train_acc: 0.71
Epoch: 4, loss: 0.63650, train_acc: 0.77
Epoch: 5, loss: 0.61844, train_acc: 0.82
Epoch: 6, loss: 0.58984, train_acc: 0.85
Epoch: 7, loss: 0.54374, train_acc: 0.89
Epoch: 8, loss: 0.73440, train_acc: 0.54
Epoch: 9, loss: 1.53917, train_acc: 0.53
Epoch: 10, loss: 0.49540, train_acc: 0.92
Finished Training
              precision    recall  f1-score   support

           0       0.55      0.80      0.65       132
           1       0.55      0.28      0.37       118

    accuracy                           0.55       250
   macro avg       0.55      0.54      0.51       250
weighted avg       0.55      0.55      0.52       250

Epoch: 1, loss: 0.69372, train_acc: 0.51
Epoch: 2, loss: 14.89733, train_acc: 0.49
Epoch: 3, loss: 1.72364, train_acc: 0.53
Epoch: 4, loss: 2.16288, train_acc: 0.51
Epoch: 5, loss: 1.93347, train_acc: 0.50
Epoch: 6, loss: 2.31723, train_acc: 0.51
Epoch: 7, loss: 1.31242, train_acc: 0.49
Epoch: 8, loss: 2.53162, train_acc: 0.47
Epoch: 9, loss: 2.02371, train_acc: 0.47
Epoch: 10, loss: 1.91087, train_acc: 0.48
Epoch: 11, loss: 1.85997, train_acc: 0.48
Epoch: 12, loss: 1.75447, train_acc: 0.50
Epoch: 13, loss: 1.57382, train_acc: 0.54
Epoch: 14, loss: 1.64196, train_acc: 0.48
Epoch: 15, loss: 1.52821, train_acc: 0.51
Epoch: 16, loss: 1.48827, train_acc: 0.49
Epoch: 17, loss: 1.37183, train_acc: 0.48
Epoch: 18, loss: 1.12165, train_acc: 0.52
Epoch: 19, loss: 0.97862, train_acc: 0.53
Epoch: 20, loss: 0.93603, train_acc: 0.50
Epoch: 21, loss: 0.92210, train_acc: 0.51
Epoch: 22, loss: 1.05232, train_acc: 0.51
Epoch: 23, loss: 1.10896, train_acc: 0.50
Epoch: 24, loss: 1.07653, train_acc: 0.50
Epoch: 25, loss: 1.06327, train_acc: 0.52
Finished Training
              precision    recall  f1-score   support

           0       0.54      0.57      0.56       132
           1       0.49      0.47      0.48       118

    accuracy                           0.52       250
   macro avg       0.52      0.52      0.52       250
weighted avg       0.52      0.52      0.52       250

test_pad.shape: 250
test_pad[0].shape: 100
weight adjusted tensor(3.1159, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -2.42263, train_acc: 0.49
weight adjusted tensor(3.1154, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -2.42254, train_acc: 0.51
weight adjusted tensor(3.1162, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -2.42516, train_acc: 0.51
weight adjusted tensor(3.1171, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -2.42721, train_acc: 0.60
weight adjusted tensor(3.1166, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -2.42800, train_acc: 0.58
weight adjusted tensor(3.1170, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -2.43080, train_acc: 0.62
weight adjusted tensor(3.1179, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -2.43473, train_acc: 0.59
weight adjusted tensor(3.1190, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -2.43972, train_acc: 0.59
weight adjusted tensor(3.1154, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -2.44163, train_acc: 0.60
weight adjusted tensor(3.1130, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -2.44799, train_acc: 0.65
weight adjusted tensor(3.1139, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -2.46204, train_acc: 0.68
weight adjusted tensor(3.1111, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -2.48126, train_acc: 0.71
weight adjusted tensor(3.1047, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -2.51867, train_acc: 0.71
weight adjusted tensor(3.1809, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -2.09403, train_acc: 0.53
weight adjusted tensor(3.1736, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -2.61327, train_acc: 0.70
Epoch: 1, loss: 0.59367, train_acc: 0.73
Epoch: 2, loss: 0.60146, train_acc: 0.70
Epoch: 3, loss: 0.60508, train_acc: 0.70
Epoch: 4, loss: 0.60827, train_acc: 0.72
Epoch: 5, loss: 0.60971, train_acc: 0.73
Epoch: 6, loss: 0.60968, train_acc: 0.75
Epoch: 7, loss: 0.60852, train_acc: 0.77
Epoch: 8, loss: 0.60642, train_acc: 0.79
Epoch: 9, loss: 0.60347, train_acc: 0.81
Epoch: 10, loss: 0.59968, train_acc: 0.83
Finished Training
              precision    recall  f1-score   support

           0       0.59      0.64      0.61       132
           1       0.55      0.49      0.52       118

    accuracy                           0.57       250
   macro avg       0.57      0.57      0.57       250
weighted avg       0.57      0.57      0.57       250

weight adjusted tensor(3.1159, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -2.42246, train_acc: 0.49
weight adjusted tensor(3.1169, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -2.42388, train_acc: 0.51
weight adjusted tensor(3.1184, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -2.42692, train_acc: 0.51
weight adjusted tensor(3.1200, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -2.42967, train_acc: 0.56
weight adjusted tensor(3.1185, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -2.42931, train_acc: 0.58
weight adjusted tensor(3.1178, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -2.43052, train_acc: 0.60
weight adjusted tensor(3.1201, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -2.43553, train_acc: 0.58
weight adjusted tensor(3.1986, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -2.51731, train_acc: 0.59
weight adjusted tensor(3.1973, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -2.52033, train_acc: 0.60
weight adjusted tensor(3.1935, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -2.52325, train_acc: 0.62
weight adjusted tensor(3.1952, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -2.53472, train_acc: 0.65
weight adjusted tensor(3.1954, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -2.54963, train_acc: 0.68
weight adjusted tensor(3.0853, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -2.46888, train_acc: 0.69
weight adjusted tensor(3.0829, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -2.43947, train_acc: 0.65
weight adjusted tensor(3.0808, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -2.09204, train_acc: 0.61
Epoch: 1, loss: 0.58490, train_acc: 0.73
Epoch: 2, loss: 0.57321, train_acc: 0.71
Epoch: 3, loss: 0.59787, train_acc: 0.61
Epoch: 4, loss: 0.60860, train_acc: 0.58
Epoch: 5, loss: 0.60563, train_acc: 0.57
Epoch: 6, loss: 0.59811, train_acc: 0.58
Epoch: 7, loss: 0.59012, train_acc: 0.61
Epoch: 8, loss: 0.57986, train_acc: 0.64
Epoch: 9, loss: 0.55838, train_acc: 0.65
Epoch: 10, loss: 0.52826, train_acc: 0.63
Finished Training
              precision    recall  f1-score   support

           0       0.76      0.27      0.39       132
           1       0.52      0.91      0.66       118

    accuracy                           0.57       250
   macro avg       0.64      0.59      0.53       250
weighted avg       0.65      0.57      0.52       250

weight adjusted tensor(3.1159, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -2.42309, train_acc: 0.51
weight adjusted tensor(3.1161, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -2.42413, train_acc: 0.50
weight adjusted tensor(3.1930, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -2.50267, train_acc: 0.55
weight adjusted tensor(3.1937, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -2.50470, train_acc: 0.53
weight adjusted tensor(3.1943, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -2.50749, train_acc: 0.57
weight adjusted tensor(3.1948, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -2.51078, train_acc: 0.60
weight adjusted tensor(3.1893, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -2.50904, train_acc: 0.61
weight adjusted tensor(3.1885, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -2.51382, train_acc: 0.63
weight adjusted tensor(3.1817, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -2.51541, train_acc: 0.62
weight adjusted tensor(3.0965, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -2.44281, train_acc: 0.64
weight adjusted tensor(3.0964, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -2.46474, train_acc: 0.68
weight adjusted tensor(3.0927, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -2.45297, train_acc: 0.70
weight adjusted tensor(3.0899, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -2.18248, train_acc: 0.54
weight adjusted tensor(3.0857, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -2.45218, train_acc: 0.60
weight adjusted tensor(3.0806, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -2.47000, train_acc: 0.68
Epoch: 1, loss: 0.60797, train_acc: 0.73
Epoch: 2, loss: 0.60983, train_acc: 0.76
Epoch: 3, loss: 0.61180, train_acc: 0.75
Epoch: 4, loss: 0.61211, train_acc: 0.73
Epoch: 5, loss: 0.60982, train_acc: 0.71
Epoch: 6, loss: 0.60431, train_acc: 0.71
Epoch: 7, loss: 0.59512, train_acc: 0.74
Epoch: 8, loss: 0.58166, train_acc: 0.77
Epoch: 9, loss: 0.56284, train_acc: 0.81
Epoch: 10, loss: 0.53626, train_acc: 0.86
Finished Training
              precision    recall  f1-score   support

           0       0.68      0.58      0.63       132
           1       0.60      0.70      0.65       118

    accuracy                           0.64       250
   macro avg       0.64      0.64      0.64       250
weighted avg       0.64      0.64      0.64       250

weight adjusted tensor(3.1159, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -2.42256, train_acc: 0.51
weight adjusted tensor(3.1157, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -2.42280, train_acc: 0.49
weight adjusted tensor(3.1149, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -2.42368, train_acc: 0.57
weight adjusted tensor(3.1149, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -2.42510, train_acc: 0.54
weight adjusted tensor(3.1154, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -2.42685, train_acc: 0.52
weight adjusted tensor(3.1117, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -2.42511, train_acc: 0.55
weight adjusted tensor(3.1122, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -2.42849, train_acc: 0.59
weight adjusted tensor(3.1135, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -2.43337, train_acc: 0.61
weight adjusted tensor(3.1086, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -2.43333, train_acc: 0.65
weight adjusted tensor(3.1025, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -2.43475, train_acc: 0.66
weight adjusted tensor(3.1016, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -2.44558, train_acc: 0.66
weight adjusted tensor(3.1030, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -2.46587, train_acc: 0.66
weight adjusted tensor(3.0965, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -2.49037, train_acc: 0.70
weight adjusted tensor(3.1725, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -2.53599, train_acc: 0.60
weight adjusted tensor(3.1689, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -2.60050, train_acc: 0.73
Epoch: 1, loss: 0.62325, train_acc: 0.69
Epoch: 2, loss: 0.55393, train_acc: 0.77
Epoch: 3, loss: 0.54854, train_acc: 0.75
Epoch: 4, loss: 0.54882, train_acc: 0.66
Epoch: 5, loss: 0.51577, train_acc: 0.68
Epoch: 6, loss: 0.48852, train_acc: 0.84
Epoch: 7, loss: 0.42654, train_acc: 0.88
Epoch: 8, loss: 1.53597, train_acc: 0.71
Epoch: 9, loss: 0.48673, train_acc: 0.78
Epoch: 10, loss: 0.57849, train_acc: 0.65
Finished Training
              precision    recall  f1-score   support

           0       0.54      0.99      0.70       132
           1       0.86      0.05      0.10       118

    accuracy                           0.55       250
   macro avg       0.70      0.52      0.40       250
weighted avg       0.69      0.55      0.41       250

test_pad.shape: 250
test_pad[0].shape: 100
weight adjusted tensor(55.0763, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -54.38254, train_acc: 0.49
weight adjusted tensor(55.0704, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -54.37063, train_acc: 0.51
weight adjusted tensor(55.0698, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -54.37691, train_acc: 0.51
weight adjusted tensor(55.0705, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -54.37826, train_acc: 0.50
weight adjusted tensor(55.0682, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -54.37449, train_acc: 0.49
weight adjusted tensor(55.0626, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -54.36971, train_acc: 0.49
weight adjusted tensor(55.0557, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -54.36465, train_acc: 0.60
weight adjusted tensor(55.0494, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -54.35965, train_acc: 0.52
weight adjusted tensor(55.0438, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -54.35443, train_acc: 0.52
weight adjusted tensor(55.0395, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -54.35034, train_acc: 0.51
weight adjusted tensor(55.0364, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -54.34815, train_acc: 0.51
weight adjusted tensor(55.0349, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -54.34826, train_acc: 0.51
weight adjusted tensor(55.0344, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -54.34957, train_acc: 0.67
weight adjusted tensor(55.0334, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -54.35051, train_acc: 0.58
weight adjusted tensor(55.0325, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -54.35155, train_acc: 0.60
Epoch: 1, loss: 0.67835, train_acc: 0.68
Epoch: 2, loss: 0.67446, train_acc: 0.67
Epoch: 3, loss: 0.66901, train_acc: 0.66
Epoch: 4, loss: 0.66226, train_acc: 0.73
Epoch: 5, loss: 0.65363, train_acc: 0.76
Epoch: 6, loss: 0.63923, train_acc: 0.78
Epoch: 7, loss: 0.61840, train_acc: 0.83
Epoch: 8, loss: 0.58133, train_acc: 0.89
Epoch: 9, loss: 0.78627, train_acc: 0.51
Epoch: 10, loss: 0.61835, train_acc: 0.54
Finished Training
D:\Anaconda\exe\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
D:\Anaconda\exe\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
D:\Anaconda\exe\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
              precision    recall  f1-score   support

           0       0.53      1.00      0.69       132
           1       0.00      0.00      0.00       118

    accuracy                           0.53       250
   macro avg       0.26      0.50      0.35       250
weighted avg       0.28      0.53      0.36       250

weight adjusted tensor(55.0763, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -54.38250, train_acc: 0.49
weight adjusted tensor(55.0772, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -54.37661, train_acc: 0.51
weight adjusted tensor(55.0812, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -54.38818, train_acc: 0.51
weight adjusted tensor(55.0857, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -54.39324, train_acc: 0.49
weight adjusted tensor(55.0885, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -54.39433, train_acc: 0.49
weight adjusted tensor(55.0892, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -54.39584, train_acc: 0.49
weight adjusted tensor(55.0877, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -54.39614, train_acc: 0.53
weight adjusted tensor(55.0864, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -54.39625, train_acc: 0.51
weight adjusted tensor(55.0852, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -54.39548, train_acc: 0.61
weight adjusted tensor(55.0845, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -54.39489, train_acc: 0.51
weight adjusted tensor(55.0849, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -54.39580, train_acc: 0.51
weight adjusted tensor(55.0850, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -54.39714, train_acc: 0.51
weight adjusted tensor(55.0852, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -54.39892, train_acc: 0.52
weight adjusted tensor(55.0858, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -54.40125, train_acc: 0.70
weight adjusted tensor(55.0860, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -54.40320, train_acc: 0.64
Epoch: 1, loss: 0.68083, train_acc: 0.62
Epoch: 2, loss: 0.67830, train_acc: 0.69
Epoch: 3, loss: 0.67471, train_acc: 0.69
Epoch: 4, loss: 0.66979, train_acc: 0.69
Epoch: 5, loss: 0.66362, train_acc: 0.71
Epoch: 6, loss: 0.65618, train_acc: 0.75
Epoch: 7, loss: 0.64538, train_acc: 0.75
Epoch: 8, loss: 0.62890, train_acc: 0.78
Epoch: 9, loss: 0.60777, train_acc: 0.81
Epoch: 10, loss: 0.57210, train_acc: 0.82
Finished Training
              precision    recall  f1-score   support

           0       0.58      0.83      0.68       132
           1       0.62      0.32      0.42       118

    accuracy                           0.59       250
   macro avg       0.60      0.57      0.55       250
weighted avg       0.60      0.59      0.56       250

weight adjusted tensor(55.0763, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -54.38311, train_acc: 0.50
weight adjusted tensor(55.0789, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -54.37902, train_acc: 0.51
weight adjusted tensor(55.0827, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -54.39078, train_acc: 0.51
weight adjusted tensor(55.0828, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -54.38817, train_acc: 0.49
weight adjusted tensor(55.0720, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -54.37750, train_acc: 0.49
weight adjusted tensor(55.0572, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -54.36533, train_acc: 0.50
weight adjusted tensor(55.0431, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -54.35291, train_acc: 0.52
weight adjusted tensor(55.0305, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -54.34051, train_acc: 0.51
weight adjusted tensor(55.0206, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -54.33045, train_acc: 0.51
weight adjusted tensor(55.0129, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -54.32331, train_acc: 0.51
weight adjusted tensor(55.0070, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -54.31875, train_acc: 0.51
weight adjusted tensor(55.0035, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -54.31684, train_acc: 0.51
weight adjusted tensor(54.9999, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -54.31487, train_acc: 0.66
weight adjusted tensor(54.9969, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -54.31339, train_acc: 0.60
weight adjusted tensor(54.9941, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -54.31236, train_acc: 0.69
Epoch: 1, loss: 0.67924, train_acc: 0.69
Epoch: 2, loss: 0.67562, train_acc: 0.68
Epoch: 3, loss: 0.67085, train_acc: 0.59
Epoch: 4, loss: 0.66523, train_acc: 0.61
Epoch: 5, loss: 0.65830, train_acc: 0.65
Epoch: 6, loss: 0.64686, train_acc: 0.65
Epoch: 7, loss: 0.63104, train_acc: 0.76
Epoch: 8, loss: 0.60842, train_acc: 0.78
Epoch: 9, loss: 0.72021, train_acc: 0.67
Epoch: 10, loss: 0.61551, train_acc: 0.55
Finished Training
              precision    recall  f1-score   support

           0       0.54      0.98      0.70       132
           1       0.80      0.07      0.12       118

    accuracy                           0.55       250
   macro avg       0.67      0.53      0.41       250
weighted avg       0.66      0.55      0.43       250

weight adjusted tensor(55.0763, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -54.38309, train_acc: 0.51
weight adjusted tensor(55.0758, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -54.38185, train_acc: 0.51
weight adjusted tensor(55.0618, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -54.36620, train_acc: 0.51
weight adjusted tensor(55.0506, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -54.35793, train_acc: 0.54
weight adjusted tensor(55.0417, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -54.35057, train_acc: 0.51
weight adjusted tensor(55.0314, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -54.34004, train_acc: 0.55
weight adjusted tensor(55.0200, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -54.32921, train_acc: 0.53
weight adjusted tensor(55.0084, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -54.31907, train_acc: 0.63
weight adjusted tensor(54.9979, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -54.30976, train_acc: 0.51
weight adjusted tensor(54.9892, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -54.30187, train_acc: 0.51
weight adjusted tensor(54.9822, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -54.29620, train_acc: 0.51
weight adjusted tensor(54.9766, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -54.29295, train_acc: 0.51
weight adjusted tensor(54.9719, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -54.29123, train_acc: 0.65
weight adjusted tensor(54.9675, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -54.29005, train_acc: 0.75
weight adjusted tensor(54.9627, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -54.28931, train_acc: 0.71
Epoch: 1, loss: 0.66677, train_acc: 0.73
Epoch: 2, loss: 0.65790, train_acc: 0.75
Epoch: 3, loss: 0.64616, train_acc: 0.75
Epoch: 4, loss: 0.62588, train_acc: 0.79
Epoch: 5, loss: 0.59595, train_acc: 0.78
Epoch: 6, loss: 0.73432, train_acc: 0.51
Epoch: 7, loss: 0.56021, train_acc: 0.75
Epoch: 8, loss: 0.58937, train_acc: 0.62
Epoch: 9, loss: 0.57110, train_acc: 0.76
Epoch: 10, loss: 0.56498, train_acc: 0.89
Finished Training
              precision    recall  f1-score   support

           0       0.64      0.45      0.53       132
           1       0.54      0.71      0.61       118

    accuracy                           0.58       250
   macro avg       0.59      0.58      0.57       250
weighted avg       0.59      0.58      0.57       250

test_pad.shape: 250
test_pad[0].shape: 100
weight adjusted tensor(23.4616, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -22.76834, train_acc: 0.50
weight adjusted tensor(23.4607, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -22.76620, train_acc: 0.51
weight adjusted tensor(23.4624, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -22.77071, train_acc: 0.51
weight adjusted tensor(23.4647, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -22.77384, train_acc: 0.52
weight adjusted tensor(23.4698, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -22.77914, train_acc: 0.55
weight adjusted tensor(23.4680, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -22.77884, train_acc: 0.57
weight adjusted tensor(23.4679, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -22.78066, train_acc: 0.51
weight adjusted tensor(23.4683, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -22.78283, train_acc: 0.57
weight adjusted tensor(23.4695, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -22.78612, train_acc: 0.60
weight adjusted tensor(23.4716, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -22.79153, train_acc: 0.61
weight adjusted tensor(23.4743, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -22.79910, train_acc: 0.62
weight adjusted tensor(23.4772, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -22.80817, train_acc: 0.63
weight adjusted tensor(23.4793, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -22.81869, train_acc: 0.66
weight adjusted tensor(23.4792, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -22.83295, train_acc: 0.69
weight adjusted tensor(23.4766, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -22.85340, train_acc: 0.71
Epoch: 1, loss: 0.57719, train_acc: 0.71
Epoch: 2, loss: 0.88313, train_acc: 0.67
Epoch: 3, loss: 2.39123, train_acc: 0.51
Epoch: 4, loss: 1.28988, train_acc: 0.51
Epoch: 5, loss: 0.70589, train_acc: 0.62
Epoch: 6, loss: 0.76689, train_acc: 0.50
Epoch: 7, loss: 0.72999, train_acc: 0.49
Epoch: 8, loss: 0.68414, train_acc: 0.60
Epoch: 9, loss: 0.66202, train_acc: 0.54
Epoch: 10, loss: 0.66700, train_acc: 0.57
Finished Training
D:\Anaconda\exe\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
D:\Anaconda\exe\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
D:\Anaconda\exe\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
              precision    recall  f1-score   support

           0       0.00      0.00      0.00       132
           1       0.47      1.00      0.64       118

    accuracy                           0.47       250
   macro avg       0.24      0.50      0.32       250
weighted avg       0.22      0.47      0.30       250

weight adjusted tensor(23.4616, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -22.76855, train_acc: 0.51
weight adjusted tensor(23.4613, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -22.76738, train_acc: 0.51
weight adjusted tensor(23.4632, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -22.77221, train_acc: 0.56
weight adjusted tensor(23.4649, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -22.77371, train_acc: 0.55
weight adjusted tensor(23.4655, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -22.77541, train_acc: 0.56
weight adjusted tensor(23.4633, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -22.77524, train_acc: 0.51
weight adjusted tensor(23.4614, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -22.77507, train_acc: 0.57
weight adjusted tensor(23.4604, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -22.77571, train_acc: 0.58
weight adjusted tensor(23.4601, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -22.77839, train_acc: 0.57
weight adjusted tensor(23.4604, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -22.78313, train_acc: 0.61
weight adjusted tensor(23.4610, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -22.78912, train_acc: 0.63
weight adjusted tensor(23.4614, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -22.79675, train_acc: 0.66
weight adjusted tensor(23.4607, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -22.80850, train_acc: 0.68
weight adjusted tensor(23.4595, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -22.82627, train_acc: 0.69
weight adjusted tensor(23.4597, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -22.86449, train_acc: 0.70
Epoch: 1, loss: 1.10467, train_acc: 0.58
Epoch: 2, loss: 1.29647, train_acc: 0.58
Epoch: 3, loss: 0.65811, train_acc: 0.58
Epoch: 4, loss: 0.61208, train_acc: 0.60
Epoch: 5, loss: 0.60666, train_acc: 0.64
Epoch: 6, loss: 0.60811, train_acc: 0.69
Epoch: 7, loss: 0.61084, train_acc: 0.74
Epoch: 8, loss: 0.61344, train_acc: 0.77
Epoch: 9, loss: 0.61553, train_acc: 0.81
Epoch: 10, loss: 0.61702, train_acc: 0.82
Finished Training
              precision    recall  f1-score   support

           0       0.63      0.52      0.57       132
           1       0.55      0.66      0.60       118

    accuracy                           0.58       250
   macro avg       0.59      0.59      0.58       250
weighted avg       0.59      0.58      0.58       250

weight adjusted tensor(23.4616, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -22.76861, train_acc: 0.51
weight adjusted tensor(23.4594, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -22.76681, train_acc: 0.51
weight adjusted tensor(23.4543, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -22.76342, train_acc: 0.54
weight adjusted tensor(23.4535, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -22.76308, train_acc: 0.54
weight adjusted tensor(23.4550, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -22.76639, train_acc: 0.56
weight adjusted tensor(23.4563, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -22.76945, train_acc: 0.53
weight adjusted tensor(23.4583, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -22.77361, train_acc: 0.57
weight adjusted tensor(23.4606, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -22.77967, train_acc: 0.61
weight adjusted tensor(23.4639, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -22.78795, train_acc: 0.61
weight adjusted tensor(23.4686, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -22.79970, train_acc: 0.60
weight adjusted tensor(23.4746, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -22.81848, train_acc: 0.65
weight adjusted tensor(23.4809, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -22.84611, train_acc: 0.69
weight adjusted tensor(23.4876, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -22.89013, train_acc: 0.64
weight adjusted tensor(23.4939, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -22.14996, train_acc: 0.52
weight adjusted tensor(23.4883, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -22.89405, train_acc: 0.66
Epoch: 1, loss: 0.64396, train_acc: 0.60
Epoch: 2, loss: 0.63332, train_acc: 0.58
Epoch: 3, loss: 0.62930, train_acc: 0.59
Epoch: 4, loss: 0.62809, train_acc: 0.59
Epoch: 5, loss: 0.62777, train_acc: 0.63
Epoch: 6, loss: 0.62768, train_acc: 0.67
Epoch: 7, loss: 0.62758, train_acc: 0.72
Epoch: 8, loss: 0.62733, train_acc: 0.76
Epoch: 9, loss: 0.62678, train_acc: 0.78
Epoch: 10, loss: 0.62561, train_acc: 0.78
Finished Training
              precision    recall  f1-score   support

           0       0.57      0.57      0.57       132
           1       0.52      0.53      0.52       118

    accuracy                           0.55       250
   macro avg       0.55      0.55      0.55       250
weighted avg       0.55      0.55      0.55       250

weight adjusted tensor(23.4616, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -22.76777, train_acc: 0.49
weight adjusted tensor(23.4589, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -22.76460, train_acc: 0.51
weight adjusted tensor(23.4623, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -22.77017, train_acc: 0.51
weight adjusted tensor(23.4664, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -22.77544, train_acc: 0.55
weight adjusted tensor(23.4684, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -22.77767, train_acc: 0.56
weight adjusted tensor(23.4695, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -22.77970, train_acc: 0.56
weight adjusted tensor(23.4700, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -22.78194, train_acc: 0.51
weight adjusted tensor(23.4704, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -22.78432, train_acc: 0.57
weight adjusted tensor(23.4712, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -22.78702, train_acc: 0.59
weight adjusted tensor(23.4722, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -22.79088, train_acc: 0.58
weight adjusted tensor(23.4735, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -22.79658, train_acc: 0.60
weight adjusted tensor(23.4750, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -22.80428, train_acc: 0.64
weight adjusted tensor(23.4769, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -22.81451, train_acc: 0.68
weight adjusted tensor(23.4781, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -22.82950, train_acc: 0.71
weight adjusted tensor(23.4813, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -22.85661, train_acc: 0.68
Epoch: 1, loss: 0.58164, train_acc: 0.66
Epoch: 2, loss: 0.92004, train_acc: 0.51
Epoch: 3, loss: 0.54909, train_acc: 0.76
Epoch: 4, loss: 0.65174, train_acc: 0.62
Epoch: 5, loss: 0.57965, train_acc: 0.66
Epoch: 6, loss: 0.58627, train_acc: 0.73
Epoch: 7, loss: 0.59325, train_acc: 0.80
Epoch: 8, loss: 0.59787, train_acc: 0.84
Epoch: 9, loss: 0.60036, train_acc: 0.85
Epoch: 10, loss: 0.60106, train_acc: 0.85
Finished Training
              precision    recall  f1-score   support

           0       0.59      0.58      0.58       132
           1       0.54      0.55      0.54       118

    accuracy                           0.56       250
   macro avg       0.56      0.56      0.56       250
weighted avg       0.56      0.56      0.56       250

test_pad.shape: 250
test_pad[0].shape: 100
weight adjusted tensor(178.3759, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -177.68264, train_acc: 0.49
weight adjusted tensor(178.3768, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -177.69093, train_acc: 0.58
weight adjusted tensor(178.2996, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -177.62143, train_acc: 0.64
weight adjusted tensor(178.3006, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -177.63103, train_acc: 0.67
weight adjusted tensor(178.3793, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -177.72041, train_acc: 0.68
weight adjusted tensor(178.3794, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -177.73425, train_acc: 0.70
weight adjusted tensor(178.3009, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -177.67417, train_acc: 0.71
weight adjusted tensor(178.5342, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -177.93381, train_acc: 0.71
weight adjusted tensor(178.6899, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -178.12705, train_acc: 0.72
weight adjusted tensor(178.4533, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -177.93619, train_acc: 0.74
weight adjusted tensor(178.5290, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -177.89479, train_acc: 0.73
weight adjusted tensor(178.3692, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -177.67785, train_acc: 0.66
weight adjusted tensor(178.5227, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -178.01006, train_acc: 0.73
weight adjusted tensor(178.5209, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -178.05986, train_acc: 0.79
weight adjusted tensor(178.6755, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -178.17396, train_acc: 0.77
Epoch: 1, loss: 0.51803, train_acc: 0.75
Epoch: 2, loss: 0.50672, train_acc: 0.76
Epoch: 3, loss: 0.49370, train_acc: 0.80
Epoch: 4, loss: 0.48597, train_acc: 0.81
Epoch: 5, loss: 0.48147, train_acc: 0.83
Epoch: 6, loss: 0.47727, train_acc: 0.84
Epoch: 7, loss: 0.47110, train_acc: 0.83
Epoch: 8, loss: 0.46127, train_acc: 0.84
Epoch: 9, loss: 0.44635, train_acc: 0.85
Epoch: 10, loss: 0.42527, train_acc: 0.85
Finished Training
              precision    recall  f1-score   support

           0       0.77      0.72      0.74       132
           1       0.71      0.75      0.73       118

    accuracy                           0.74       250
   macro avg       0.74      0.74      0.74       250
weighted avg       0.74      0.74      0.74       250

weight adjusted tensor(178.3759, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -177.68022, train_acc: 0.49
weight adjusted tensor(178.3754, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -177.68682, train_acc: 0.53
weight adjusted tensor(178.2971, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -177.61487, train_acc: 0.54
weight adjusted tensor(178.1003, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -177.42567, train_acc: 0.64
weight adjusted tensor(178.2568, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -177.59034, train_acc: 0.69
weight adjusted tensor(178.4131, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -177.75601, train_acc: 0.69
weight adjusted tensor(178.2570, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -177.61193, train_acc: 0.69
weight adjusted tensor(178.3350, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -177.70607, train_acc: 0.71
weight adjusted tensor(178.4924, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -177.88416, train_acc: 0.71
weight adjusted tensor(178.5701, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -177.98958, train_acc: 0.72
weight adjusted tensor(178.8822, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -178.34245, train_acc: 0.75
weight adjusted tensor(178.8815, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -178.38142, train_acc: 0.76
weight adjusted tensor(178.8808, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -177.99166, train_acc: 0.71
weight adjusted tensor(178.8790, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -178.41144, train_acc: 0.78
weight adjusted tensor(178.8767, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -178.32995, train_acc: 0.73
Epoch: 1, loss: 0.53150, train_acc: 0.73
Epoch: 2, loss: 0.50897, train_acc: 0.77
Epoch: 3, loss: 0.50346, train_acc: 0.80
Epoch: 4, loss: 0.50468, train_acc: 0.81
Epoch: 5, loss: 0.50710, train_acc: 0.81
Epoch: 6, loss: 0.50876, train_acc: 0.82
Epoch: 7, loss: 0.50896, train_acc: 0.82
Epoch: 8, loss: 0.50740, train_acc: 0.82
Epoch: 9, loss: 0.50395, train_acc: 0.82
Epoch: 10, loss: 0.49856, train_acc: 0.83
Finished Training
              precision    recall  f1-score   support

           0       0.72      0.54      0.61       132
           1       0.60      0.76      0.67       118

    accuracy                           0.64       250
   macro avg       0.66      0.65      0.64       250
weighted avg       0.66      0.64      0.64       250

weight adjusted tensor(178.3759, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -177.68189, train_acc: 0.47
weight adjusted tensor(178.2972, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -177.61057, train_acc: 0.52
weight adjusted tensor(178.2571, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -177.57816, train_acc: 0.61
weight adjusted tensor(178.0234, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -177.35240, train_acc: 0.69
weight adjusted tensor(177.9876, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -177.32564, train_acc: 0.69
weight adjusted tensor(178.0655, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -177.41499, train_acc: 0.70
weight adjusted tensor(177.9868, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -177.35078, train_acc: 0.70
weight adjusted tensor(178.2200, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -177.60290, train_acc: 0.70
weight adjusted tensor(178.3361, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -177.74572, train_acc: 0.71
weight adjusted tensor(178.4899, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -177.93682, train_acc: 0.73
weight adjusted tensor(178.4869, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -177.98725, train_acc: 0.75
weight adjusted tensor(178.2510, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -177.55161, train_acc: 0.72
weight adjusted tensor(178.2490, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -177.43488, train_acc: 0.70
weight adjusted tensor(178.1684, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -177.62106, train_acc: 0.77
weight adjusted tensor(178.2441, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -177.79008, train_acc: 0.78
Epoch: 1, loss: 0.49899, train_acc: 0.75
Epoch: 2, loss: 0.51586, train_acc: 0.74
Epoch: 3, loss: 0.51063, train_acc: 0.75
Epoch: 4, loss: 0.50038, train_acc: 0.77
Epoch: 5, loss: 0.49229, train_acc: 0.80
Epoch: 6, loss: 0.48691, train_acc: 0.82
Epoch: 7, loss: 0.48271, train_acc: 0.83
Epoch: 8, loss: 0.47799, train_acc: 0.84
Epoch: 9, loss: 0.47118, train_acc: 0.85
Epoch: 10, loss: 0.46068, train_acc: 0.86
Finished Training
              precision    recall  f1-score   support

           0       0.70      0.73      0.72       132
           1       0.68      0.64      0.66       118

    accuracy                           0.69       250
   macro avg       0.69      0.69      0.69       250
weighted avg       0.69      0.69      0.69       250

weight adjusted tensor(178.3759, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -177.68259, train_acc: 0.50
weight adjusted tensor(178.5696, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -177.88346, train_acc: 0.52
weight adjusted tensor(178.4923, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -177.81365, train_acc: 0.59
weight adjusted tensor(178.4934, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -177.82332, train_acc: 0.66
weight adjusted tensor(178.4944, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -177.83358, train_acc: 0.68
weight adjusted tensor(178.3386, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -177.68927, train_acc: 0.68
weight adjusted tensor(178.4943, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -177.86051, train_acc: 0.69
weight adjusted tensor(178.4566, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -177.84302, train_acc: 0.69
weight adjusted tensor(178.6896, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -178.10374, train_acc: 0.70
weight adjusted tensor(178.5317, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -177.98729, train_acc: 0.74
weight adjusted tensor(178.5954, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -178.08983, train_acc: 0.74
weight adjusted tensor(178.7504, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -177.89703, train_acc: 0.67
weight adjusted tensor(178.5913, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -178.13301, train_acc: 0.79
weight adjusted tensor(178.5887, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -178.04164, train_acc: 0.74
weight adjusted tensor(178.3503, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -177.82634, train_acc: 0.75
Epoch: 1, loss: 0.49842, train_acc: 0.78
Epoch: 2, loss: 0.49661, train_acc: 0.80
Epoch: 3, loss: 0.50052, train_acc: 0.81
Epoch: 4, loss: 0.50379, train_acc: 0.81
Epoch: 5, loss: 0.50486, train_acc: 0.81
Epoch: 6, loss: 0.50335, train_acc: 0.81
Epoch: 7, loss: 0.49915, train_acc: 0.82
Epoch: 8, loss: 0.49224, train_acc: 0.82
Epoch: 9, loss: 0.48257, train_acc: 0.83
Epoch: 10, loss: 0.47008, train_acc: 0.84
Finished Training
              precision    recall  f1-score   support

           0       0.72      0.65      0.68       132
           1       0.65      0.71      0.68       118

    accuracy                           0.68       250
   macro avg       0.68      0.68      0.68       250
weighted avg       0.68      0.68      0.68       250

./embed/filtered.txt
=================================================================================
Serial              Dataset       Num Pairs       Not found             Rho
=================================================================================
     1         EN-MC-30.txt              30              0         0.7767
Vectors read from: ./embed/filtered.txt
     2     EN-MEN-TR-3k.txt            3000              0         0.7303
     3     EN-MTurk-287.txt             287              0         0.6580
     4     EN-MTurk-771.txt             771              0         0.6028
     5         EN-RG-65.txt              65              0         0.7715
     6   EN-RW-STANFORD.txt            2034             96         0.4093
     7    EN-SIMLEX-999.txt             999              0         0.3386
     8  EN-SimVerb-3500.txt            3500              2         0.2004
     9      EN-VERB-143.txt             144              0         0.3333
    10    EN-WS-353-ALL.txt             353              0         0.6570
    11    EN-WS-353-REL.txt             252              0         0.6027
    12    EN-WS-353-SIM.txt             203              0         0.7226
    13        EN-YP-130.txt             130              0         0.4274
./embed/filtered.txt
Vectors read from: ./embed/filtered.txt
test_pad.shape: 250
test_pad[0].shape: 100
weight adjusted tensor(1.9888, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -1.29575, train_acc: 0.51
weight adjusted tensor(1.9894, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -1.29629, train_acc: 0.51
weight adjusted tensor(1.9914, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -1.29903, train_acc: 0.52
weight adjusted tensor(1.9928, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -1.30122, train_acc: 0.53
weight adjusted tensor(1.9949, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -1.30477, train_acc: 0.54
weight adjusted tensor(1.9973, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -1.30762, train_acc: 0.51
weight adjusted tensor(1.9955, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -1.30708, train_acc: 0.53
weight adjusted tensor(1.9979, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -1.31142, train_acc: 0.57
weight adjusted tensor(2.0004, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -1.31567, train_acc: 0.59
weight adjusted tensor(2.0020, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -1.31968, train_acc: 0.59
weight adjusted tensor(2.0073, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -1.32880, train_acc: 0.60
weight adjusted tensor(1.9296, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -1.25530, train_acc: 0.60
weight adjusted tensor(1.9351, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -1.26734, train_acc: 0.63
weight adjusted tensor(1.9250, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -1.26618, train_acc: 0.66
weight adjusted tensor(1.9314, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -1.28565, train_acc: 0.71
Epoch: 1, loss: 0.62673, train_acc: 0.70
Epoch: 2, loss: 0.61010, train_acc: 0.71
Epoch: 3, loss: 0.74926, train_acc: 0.52
Epoch: 4, loss: 0.58412, train_acc: 0.76
Epoch: 5, loss: 0.62754, train_acc: 0.61
Epoch: 6, loss: 0.62341, train_acc: 0.62
Epoch: 7, loss: 0.60237, train_acc: 0.66
Epoch: 8, loss: 0.58825, train_acc: 0.71
Epoch: 9, loss: 0.58618, train_acc: 0.69
Epoch: 10, loss: 0.58515, train_acc: 0.70
Finished Training
              precision    recall  f1-score   support

           0       0.54      0.59      0.57       132
           1       0.49      0.44      0.46       118

    accuracy                           0.52       250
   macro avg       0.52      0.52      0.51       250
weighted avg       0.52      0.52      0.52       250

weight adjusted tensor(1.9888, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -1.29551, train_acc: 0.51
weight adjusted tensor(1.9890, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -1.29384, train_acc: 0.49
weight adjusted tensor(1.9871, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -1.29496, train_acc: 0.51
weight adjusted tensor(1.9856, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -1.29277, train_acc: 0.51
weight adjusted tensor(1.9852, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -1.29379, train_acc: 0.51
weight adjusted tensor(1.9855, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -1.29552, train_acc: 0.55
weight adjusted tensor(2.0615, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -1.37208, train_acc: 0.57
weight adjusted tensor(2.0494, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -1.36070, train_acc: 0.57
weight adjusted tensor(1.9718, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -1.28463, train_acc: 0.59
weight adjusted tensor(1.9013, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -1.21629, train_acc: 0.60
weight adjusted tensor(1.8913, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -1.20857, train_acc: 0.62
weight adjusted tensor(1.8948, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -1.21458, train_acc: 0.57
weight adjusted tensor(1.8948, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -1.21822, train_acc: 0.63
weight adjusted tensor(1.8990, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -1.22755, train_acc: 0.66
weight adjusted tensor(1.9006, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -1.23532, train_acc: 0.66
Epoch: 1, loss: 0.65730, train_acc: 0.67
Epoch: 2, loss: 0.64507, train_acc: 0.69
Epoch: 3, loss: 0.62895, train_acc: 0.75
Epoch: 4, loss: 0.60198, train_acc: 0.83
Epoch: 5, loss: 0.55431, train_acc: 0.86
Epoch: 6, loss: 1.03019, train_acc: 0.51
Epoch: 7, loss: 0.82086, train_acc: 0.61
Epoch: 8, loss: 0.52646, train_acc: 0.90
Epoch: 9, loss: 0.55153, train_acc: 0.81
Epoch: 10, loss: 0.56072, train_acc: 0.75
Finished Training
              precision    recall  f1-score   support

           0       0.62      0.12      0.20       132
           1       0.48      0.92      0.63       118

    accuracy                           0.50       250
   macro avg       0.55      0.52      0.42       250
weighted avg       0.55      0.50      0.41       250

weight adjusted tensor(1.9888, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -1.29549, train_acc: 0.49
weight adjusted tensor(1.9890, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -1.29231, train_acc: 0.51
weight adjusted tensor(1.9903, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -1.29833, train_acc: 0.55
weight adjusted tensor(1.9912, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -1.29765, train_acc: 0.49
weight adjusted tensor(1.9924, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -1.29946, train_acc: 0.50
weight adjusted tensor(1.9937, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -1.30276, train_acc: 0.52
weight adjusted tensor(1.9925, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -1.30290, train_acc: 0.55
weight adjusted tensor(1.9936, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -1.30442, train_acc: 0.51
weight adjusted tensor(1.9949, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -1.30625, train_acc: 0.51
weight adjusted tensor(1.9468, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -1.25961, train_acc: 0.51
weight adjusted tensor(1.9008, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -1.21566, train_acc: 0.52
weight adjusted tensor(1.9000, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -1.21700, train_acc: 0.62
weight adjusted tensor(1.9027, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -1.22195, train_acc: 0.64
weight adjusted tensor(1.9060, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -1.22808, train_acc: 0.64
weight adjusted tensor(1.9081, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -1.23428, train_acc: 0.65
Epoch: 1, loss: 0.66850, train_acc: 0.64
Epoch: 2, loss: 0.66269, train_acc: 0.65
Epoch: 3, loss: 0.65336, train_acc: 0.70
Epoch: 4, loss: 0.64119, train_acc: 0.76
Epoch: 5, loss: 0.62444, train_acc: 0.83
Epoch: 6, loss: 0.59908, train_acc: 0.79
Epoch: 7, loss: 0.55482, train_acc: 0.86
Epoch: 8, loss: 0.54149, train_acc: 0.75
Epoch: 9, loss: 2.42710, train_acc: 0.51
Epoch: 10, loss: 1.51119, train_acc: 0.51
Finished Training
              precision    recall  f1-score   support

           0       0.57      0.06      0.11       132
           1       0.47      0.95      0.63       118

    accuracy                           0.48       250
   macro avg       0.52      0.50      0.37       250
weighted avg       0.53      0.48      0.36       250

weight adjusted tensor(1.9888, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 1, loss: -1.29443, train_acc: 0.49
weight adjusted tensor(1.9869, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 2, loss: -1.29146, train_acc: 0.51
weight adjusted tensor(1.9859, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 3, loss: -1.29296, train_acc: 0.51
weight adjusted tensor(1.9849, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 4, loss: -1.29325, train_acc: 0.56
weight adjusted tensor(1.9841, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 5, loss: -1.29233, train_acc: 0.52
weight adjusted tensor(1.9834, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 6, loss: -1.29200, train_acc: 0.52
weight adjusted tensor(1.9797, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 7, loss: -1.28950, train_acc: 0.55
weight adjusted tensor(1.9789, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 8, loss: -1.29011, train_acc: 0.57
weight adjusted tensor(1.9780, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 9, loss: -1.29039, train_acc: 0.57
weight adjusted tensor(1.9620, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 10, loss: -1.27538, train_acc: 0.54
weight adjusted tensor(2.0394, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 11, loss: -1.35453, train_acc: 0.53
weight adjusted tensor(1.9545, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 12, loss: -1.27230, train_acc: 0.62
weight adjusted tensor(1.9564, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 13, loss: -1.27734, train_acc: 0.66
weight adjusted tensor(1.9587, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 14, loss: -1.28329, train_acc: 0.66
weight adjusted tensor(1.9616, dtype=torch.float64, grad_fn=<DivBackward0>)
Epoch: 15, loss: -1.29118, train_acc: 0.67
Epoch: 1, loss: 0.66321, train_acc: 0.67
Epoch: 2, loss: 0.65386, train_acc: 0.70
Epoch: 3, loss: 0.64070, train_acc: 0.74
Epoch: 4, loss: 0.62069, train_acc: 0.79
Epoch: 5, loss: 0.58983, train_acc: 0.86
Epoch: 6, loss: 0.55854, train_acc: 0.69
Epoch: 7, loss: 0.75350, train_acc: 0.53
Epoch: 8, loss: 0.53259, train_acc: 0.78
Epoch: 9, loss: 0.54498, train_acc: 0.85
Epoch: 10, loss: 0.54884, train_acc: 0.76
Finished Training
              precision    recall  f1-score   support

           0       0.59      0.08      0.13       132
           1       0.48      0.94      0.63       118

    accuracy                           0.48       250
   macro avg       0.53      0.51      0.38       250
weighted avg       0.54      0.48      0.37       250


Process finished with exit code 0
